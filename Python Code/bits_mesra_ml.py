# -*- coding: utf-8 -*-
"""Bits_Mesra_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10uvA712NmIvd84ypQp_EqxJ_mKhqBTZe

STEP -1

Importing Dataset 

Data Pre Processing
"""

#importing modules -step-2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Step-3 Importing Dataset
data= pd.read_csv('diabetes.csv')
print(data)

#Step -4 : Independent Variables, Dependent Variables
#Outcome - Dependent Variables -Y
#Pregnancies,GLucose......,Age- Independent Variables -X
X=data.iloc[:,:-1].values # Extract All Rows ,Excluding Last Column
Y=data.iloc[:,-1].values

#Step-5 : Split Dataset Into Two Sets or two parts
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=0)

print(X_train)

print(X_test)

print(Y_train)

print(Y_test)

#observation 1 - is there any empty rows in the dataset - No Empty Rows 
# Observation 2- is there any categorical data int/float ,string [encode - onehot,label]
#observation 3- Are the values are far greater than the neighbor values - variable scaling-yes

#Step -6 feature Scaling -Standard Deviation [ -3 to +3]
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)

#print(X_train)
#print(X_test)

#Step -7 -KNN -Supervised Learning [X,Y]
from sklearn.neighbors import KNeighborsClassifier
classifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)
classifier.fit(X_train,Y_train)

Y_pred=classifier.predict(X_test)
print(Y_pred)

#Step-9 Accuracy 
from sklearn.metrics import accuracy_score
accuracy_score(Y_test,Y_pred)

pip install flask-ngrok

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

from flask import Flask, request, render_template
from flask_ngrok import run_with_ngrok

app = Flask(__name__)
run_with_ngrok(app)

dataset=pd.read_csv('diabetes.csv')
X=dataset.iloc[:,:-1].values
Y=dataset.iloc[:,-1].values

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3)
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)

classifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)
classifier.fit(X_train,Y_train)

#Y_pred=classifier.predict(X_test)
#accuracy_score(Y_test,Y_pred)
#print(classifier.predict(sc.fit_transform([[1,89,66,23,94,28.1,0.167,21]])))

@app.route('/') 
def my_form():
  return render_template('diabetes.html')

@app.route('/',methods=['POST'])
def my_form_post():
  pregnancies=request.form['pregnancies']
  glucose=request.form['glucose']
  bp=request.form['bp']
  skinthickness=request.form['skinthickness']
  insulin=request.form['insulin']
  bmi=request.form['bmi']
  dpf=request.form['dpf']
  age=request.form['age']
  text=classifier.predict(sc.transform([[pregnancies,glucose,bp,skinthickness,insulin,bmi,dpf,age]]))
  print(text)
  if(text[0]==0):
    t='Prediction: No Diabetes'
  elif(text[0]==1):
    t='Prediction: Yes Diabetes'
  processed_text=t.upper()
  return (processed_text)

if __name__=="__main__":
  app.run()